<!DOCTYPE html>
<html lang="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Woody's Tuesday Night Trivia</title>
        <!--<link href="/styles/index_styles.css" rel="stylesheet" type="text/css"/>-->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">
        <style>
            body {
                max-width: 100%; overflow-x: hidden; 
            }
            .row {
                height: 10vh;
            }
            .row1 {
                margin-top: 20vh;
            }
            /*.answers {
                margin-top: -13vh;
            }*/
        </style>
    </head>
    <body>
            <nav class="navbar fixed-top navbar-light bg-light">
                <button class="retrieve btn btn-outline-secondary">Pull Answers</button>
                <form method="post" action="/admin_home">
                    <button type="submit" class="btn btn-outline-secondary"><i class="bi bi-arrow-left-square"></i></button>
                </form>
                <form class="reset_form" method="post" action="/reset">
                    <button type="submit" class="reset btn btn-outline-secondary">Reset Totals</button>
                </form>
                    <button type="submit" class="standings btn btn-outline-secondary">Show Standings</button>
                <form method="get" action="/">
                    <button type="submit" class="btn btn-outline-secondary"> <i class="bi bi-house"></i></button>
                </form>
                <form class="chat" method="post" action="/general_chat" target="_blank">
                    <button class="open_chat btn btn-outline-secondary" type="submit">Open Chat</button>
                    <input type="hidden" name="userName" value="Admin"/>
                </form>
              </nav>
        <div class="row"></div>
        <div class="row align-top">
            <div class="col-md-3">
            </div>
            <div class="col-md-6">
                <main class="answers"></main>
                <div class="results"></div>
            </div> 
        </div> 
        <div class="row row1">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <h3 id="intro">Welcome, admin! Would you like to Pull Answers, Reset Totals, Show Standings or Open Chat?</h3>
            </div>
        </div>       
        <script>
            const answers = document.querySelector('.answers');
            const retrieve = document.querySelector('.retrieve');
            const reset_form = document.querySelector('.reset_form');
            const reset = document.querySelector('.reset');
            const openChat = document.querySelector('.open_chat');
            const intro = document.getElementById('intro');
            const results = document.querySelector('.results');
            const standings = document.querySelector('.standings');

            const updateUI = async () => { 
                hide_intro(); hide_body();                
                const res = await fetch(`/get_qs`);
                try {
                    //form.classList.add('hide');
                    const resp = await res.text();
                    try {
                        let parsed = JSON.parse(resp);
                        let fragment = document.createDocumentFragment(); 
                        for(let x of parsed){
                            i=1;
                            let para = document.createElement('p');
                            para.innerText = `${x.question}: ${x.q} Correct: ${x.correct} A: ${x.option1} B: ${x.option2} C: ${x.option3} D: ${x.option4}`;
                            fragment.appendChild(para);
                            i++
                        }
                        answers.appendChild(fragment);
                    }
                    catch(err){
                        console.log(err);
                    }
                }
                catch(error){
                    console.log(error);
                }
            };

            const showStandings = async () => {
                hide_intro(); hide_body();                
                const res = await fetch(`/standings`);
                try {
                    //form.classList.add('hide');
                    const resp = await res.text();
                    try {
                        let parsed = JSON.parse(resp);
                        let fragment = document.createDocumentFragment();
                        for(let x of parsed){
                            let para = document.createElement('p');
                            para.innerText = `${x.teamName} - Points: ${x.runningTotal} Last Question Answered: ${x.lastQuestionAnswered}`;
                            fragment.appendChild(para);
                        }
                        results.appendChild(fragment);
                    }
                    catch(err){
                        console.log(err);
                    }
                }
                catch(error){
                    console.log(error)
                }
            }

            const resetTotals = async(e) => {
                const re_set = confirm(`Are you sure you'd like to reset totals? If you confirm, all teams' logged-in users, running totals, final bets, last-question-answered values, and chats will reset to their original values.`);
                if(re_set){
                    reset_form.action = '/reset';
                }
                else {
                    e.preventDefault();
                }
            };

            const hide_intro = () => {
                intro.style.display = 'none';
            }
            const hide_body = () => {
                answers.innerHTML = '';
                results.innerHTML = '';
            };
/*
            const open_chat = async(e) => {
                window.open('/admin_chat', '_blank');
            };
*/
            retrieve.addEventListener('click', updateUI);
            reset.addEventListener('click', resetTotals);
            standings.addEventListener('click', showStandings);
            //openChat.addEventListener('click', open_chat);

        </script>
    
    </body>
    </html>